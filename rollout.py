import tensorflow as tf
from tensorflow.python.ops import tensor_array_ops, control_flow_ops
import numpy as np
from attention_decoder import attention_decoder


class Rollout(object):
    def __init__(self, generator, update_rate):
        self.generator = generator
        self.update_rate = update_rate

        # -------
        self.num_emb = self.generator._hps.num_emb
        self.batch_size = self.generator._hps.batch_size
        self.emb_dim = self.generator._hps.emb_dim
        self.hidden_dim = self.generator._hps.hidden_dim
        self.max_enc_steps = self.generator._hps.max_enc_steps
        self.max_dec_steps = self.generator._hps.max_dec_steps
        self.start_token = tf.identity(self.generator.start_token)
        self.learning_rate = self.generator._hps.learning_rate
        self.pointer_gen = self.generator._hps.pointer_gen
        self.coverage = self.generator._hps.coverage
        # -------

        self.g_embeddings = tf.identity(self.generator.embeddings)
        self.g_recurrent_unit = tf.get_variable('generator/decoder_cell')
        # maps h_tm1 to h_t for generator
        self.g_output_unit = self.get_output_unit()
        # maps h_t to o_t (output token logits)

        #######################################################################
        # placeholder definition
        self.x = tf.placeholder(tf.int32, shape=[self.batch_size, self.max_dec_steps])
        # sequence of tokens generated by generator
        self.given_num = tf.placeholder(tf.int32)

        # processed for batch
        with tf.device("/cpu:0"):
            self.processed_x = tf.transpose(tf.nn.embedding_lookup(self.g_embeddings, self.x), perm=[1, 0, 2])
            # seq_length x batch_size x emb_dim

        ta_emb_x = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length)
        ta_emb_x = ta_emb_x.unstack(self.processed_x)

        ta_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length)
        ta_x = ta_x.unstack(tf.transpose(self.x, perm=[1, 0]))
        ######################################################################

        self.h0 = tf.zeros([self.batch_size, self.hidden_dim])
        self.h0 = tf.stack([self.h0, self.h0])

        gen_x = tensor_array_ops.TensorArray(dtype=tf.int32, size=self.sequence_length, dynamic_size=False, infer_shape=True)

        cell = tf.contrib.rnn.LSTMCell(
            self.hidden_dim,
            state_is_tuple=True,
            initializer=self.rand_unif_init, name='decoder_cell')
        # shold identify it to here because no bpp is needed

        emb_dec_inputs = [tf.nn.embedding_lookup(self.g_embeddings, x) for x in tf.unstack(self.x, axis=1)]
        given_inputs = emb_dec_inputs[:self.given_num]

        if self.coverage:
            self.prev_coverage = tf.placeholder(
                tf.float32, [hps.batch_size, None],
                name='prev_coverage')

        # Add the output projection to obtain the vocabulary distribution
        with tf.variable_scope('output_projection'):
            w = tf.get_variable(
                'w', [hps.hidden_dim, vsize],
                dtype=tf.float32, initializer=self.trunc_norm_init, trainable=Flalse)
            w_t = tf.transpose(w)  # NOQA
            v = tf.get_variable(
                'v',
                [vsize],
                dtype=tf.float32,
                initializer=self.trunc_norm_init, trainable=Flalse)
            vocab_scores = []
            # vocab_scores is the vocabulary distribution before applying
            # softmax. Each entry on the list corresponds to one decoder
            # step
            for i, output in enumerate(decoder_outputs):
                if i > 0:
                    tf.get_variable_scope().reuse_variables()
                vocab_scores.append(
                    tf.nn.xw_plus_b(output, w, v))
                # apply the output linear layer, the parameters in the
                # output layer are shared

            # The vocabulary distributions. List length max_dec_steps of
            # (batch_size, vsize) arrays. The words are in the order they
            # appear in the vocabulary file.
            vocab_dists = [tf.nn.softmax(s) for s in vocab_scores]

        def _g_recurrence_1(i, x_t, h_tm1, given_num, gen_x):
            h_t = self.g_recurrent_unit(x_t, h_tm1)  # hidden_memory_tuple
            x_tp1 = ta_emb_x.read(i)
            gen_x = gen_x.write(i, ta_x.read(i))
            return i + 1, x_tp1, h_t, given_num, gen_x

        def _g_recurrence_given(i, x_t, h_tm1, given_num, gen_x):
            output, out_state, attn_dist, p_gen, coverage = attention_decoder(
                given_inputs, self.generator._dec_in_state, self.generator._enc_states, cell,
                initial_state_attention=True,
                pointer_gen=self.pointer_gen, use_coverage=self.coverage,
                prev_coverage=prev_coverage)
            cells = [np.expand_dims(state.c, axis=0) for state in dec_init_states]
            hiddens = [np.expand_dims(state.h, axis=0) for state in dec_init_states]
            new_c = np.concatenate(cells, axis=0)  # shape [batch_size,hidden_dim]
            new_h = np.concatenate(hiddens, axis=0)  # shape [batch_size,hidden_dim]
            new_dec_in_state = tf.contrib.rnn.LSTMStateTuple(new_c, new_h)
            x_tp1 = ta_emb_x.read(i)
            gen_x = gen_x.write(i, ta_x.read(i))

            return i+1, x_t, h_tm1, given_num, self.gen_x

        i, x_t, h_tm1, given_num, self.gen_x = control_flow_ops.while_loop(
            cond=lambda i, _1, _2, given_num, _4: i < given_num,
            body=_g_recurrence_given,
            loop_vars=(tf.constant(0, dtype=tf.int32),
                       tf.nn.embedding_lookup(self.g_embeddings, self.start_token),
                       self.h0, self.given_num, gen_x))

        _, _, _, _, self.gen_x = control_flow_ops.while_loop(
            cond=lambda i, _1, _2, _3, _4: i < self.sequence_length,
            body=_g_recurrence,
            loop_vars=(i, x_t, h_tm1, given_num, self.gen_x))

        self.gen_x = self.gen_x.stack()  # seq_length x batch_size
        self.gen_x = tf.transpose(self.gen_x, perm=[1, 0])
        # batch_size x seq_length

    def get_reward(self, sess, input_x, input_xs, rollout_num, discriminator):
        rewards = []
        for i in range(rollout_num):
            for given_num in range(1, 20):
                feed = {self.x: input_x, self.given_num: given_num}
                samples = sess.run(self.gen_x, feed)
                feed = {
                    discriminator.dis_input_x: samples,
                    discriminator.dis_input_xs: input_xs,
                    discriminator.dropout_keep_prob: 1.0}
                ypred_for_auc = sess.run(discriminator.dis_ypred_for_auc, feed)
                ypred = np.array([item[1] for item in ypred_for_auc])
                if i == 0:
                    rewards.append(ypred)
                else:
                    rewards[given_num - 1] += ypred

            # the last token reward
            feed = {
                discriminator.dis_input_x: input_x,
                discriminator.dis_input_xs: input_xs,
                discriminator.dropout_keep_prob: 1.0}
            ypred_for_auc = sess.run(discriminator.dis_ypred_for_auc, feed)
            ypred = np.array([item[1] for item in ypred_for_auc])
            if i == 0:
                rewards.append(ypred)
            else:
                rewards[19] += ypred

        rewards = np.transpose(np.array(rewards)) / (1.0 * rollout_num)
        # batch_size x seq_length
        return rewards

    def update_recurrent_unit(self):
        # Weights and Bias for input and hidden tensor
        self.Wi = self.update_rate * self.Wi + (1 - self.update_rate) * tf.identity(self.generator.Wi)
        self.Ui = self.update_rate * self.Ui + (1 - self.update_rate) * tf.identity(self.generator.Ui)
        self.bi = self.update_rate * self.bi + (1 - self.update_rate) * tf.identity(self.generator.bi)

        self.Wf = self.update_rate * self.Wf + (1 - self.update_rate) * tf.identity(self.generator.Wf)
        self.Uf = self.update_rate * self.Uf + (1 - self.update_rate) * tf.identity(self.generator.Uf)
        self.bf = self.update_rate * self.bf + (1 - self.update_rate) * tf.identity(self.generator.bf)

        self.Wog = self.update_rate * self.Wog + (1 - self.update_rate) * tf.identity(self.generator.Wog)
        self.Uog = self.update_rate * self.Uog + (1 - self.update_rate) * tf.identity(self.generator.Uog)
        self.bog = self.update_rate * self.bog + (1 - self.update_rate) * tf.identity(self.generator.bog)

        self.Wc = self.update_rate * self.Wc + (1 - self.update_rate) * tf.identity(self.generator.Wc)
        self.Uc = self.update_rate * self.Uc + (1 - self.update_rate) * tf.identity(self.generator.Uc)
        self.bc = self.update_rate * self.bc + (1 - self.update_rate) * tf.identity(self.generator.bc)

        def unit(x, hidden_memory_tm1):
            previous_hidden_state, c_prev = tf.unstack(hidden_memory_tm1)

            # Input Gate
            i = tf.sigmoid(tf.matmul(x, self.Wi) + tf.matmul(previous_hidden_state, self.Ui) + self.bi)

            # Forget Gate
            f = tf.sigmoid(tf.matmul(x, self.Wf) + tf.matmul(previous_hidden_state, self.Uf) + self.bf)

            # Output Gate
            o = tf.sigmoid(tf.matmul(x, self.Wog) + tf.matmul(previous_hidden_state, self.Uog) + self.bog)

            # New Memory Cell
            c_ = tf.nn.tanh(tf.matmul(x, self.Wc) + tf.matmul(previous_hidden_state, self.Uc) + self.bc)

            # Final Memory cell
            c = f * c_prev + i * c_

            # Current Hidden state
            current_hidden_state = o * tf.nn.tanh(c)

            return tf.stack([current_hidden_state, c])

        return unit

    def create_output_unit(self):
        self.Wo = tf.identity(self.generator.Wo)
        self.bo = tf.identity(self.generator.bo)

        def unit(hidden_memory_tuple):
            hidden_state, c_prev = tf.unstack(hidden_memory_tuple)
            # hidden_state : batch x hidden_dim
            logits = tf.matmul(hidden_state, self.Wo) + self.bo
            # output = tf.nn.softmax(logits)
            return logits

        return unit

    def update_output_unit(self):
        self.Wo = self.update_rate * self.Wo + (1 - self.update_rate) * tf.identity(self.generator.Wo)
        self.bo = self.update_rate * self.bo + (1 - self.update_rate) * tf.identity(self.generator.bo)

        def unit(hidden_memory_tuple):
            hidden_state, c_prev = tf.unstack(hidden_memory_tuple)
            # hidden_state : batch x hidden_dim
            logits = tf.matmul(hidden_state, self.Wo) + self.bo
            # output = tf.nn.softmax(logits)
            return logits

        return unit

    def update_params(self):
        self.g_embeddings = tf.identity(self.generator.g_embeddings)
        self.g_recurrent_unit = self.update_recurrent_unit()
        self.g_output_unit = self.update_output_unit()
